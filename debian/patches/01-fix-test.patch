Fix one of the unit tests that depends on a hardcoded table name. The problem
with this, is that if the test is ran twice, the table tries to be recreated
while already existing, and this gives an error. We fix it by "randomizing" the
table name.
--- a/src/test/java/org/sqlite/ConnectionTest.java
+++ b/src/test/java/org/sqlite/ConnectionTest.java
@@ -283,15 +283,20 @@
 
     @Test
     public void URIFilenames() throws SQLException {
+
+        // Required because the test fails when ran twice.
+        String tbl = "tbl" + Long.toHexString(Double.doubleToLongBits(Math.random()));
+        String tbl2 = "tbl" + Long.toHexString(Double.doubleToLongBits(Math.random()));
+
         Connection conn1 = DriverManager.getConnection("jdbc:sqlite:file:memdb1?mode=memory&cache=shared");
         Statement stmt1 = conn1.createStatement();
-        stmt1.executeUpdate("create table tbl (col int)");
-        stmt1.executeUpdate("insert into tbl values(100)");
+        stmt1.executeUpdate("create table " + tbl + " (col int)");
+        stmt1.executeUpdate("insert into " + tbl + " values(100)");
         stmt1.close();
 
         Connection conn2 = DriverManager.getConnection("jdbc:sqlite:file:memdb1?mode=memory&cache=shared");
         Statement stmt2 = conn2.createStatement();
-        ResultSet rs = stmt2.executeQuery("select * from tbl");
+        ResultSet rs = stmt2.executeQuery("select * from " + tbl);
         assertTrue(rs.next());
         assertEquals(100, rs.getInt(1));
         stmt2.close();
@@ -299,16 +304,16 @@
         Connection conn3 = DriverManager.getConnection("jdbc:sqlite:file::memory:?cache=shared");
         Statement stmt3 = conn3.createStatement();
         stmt3.executeUpdate("attach 'file:memdb1?mode=memory&cache=shared' as memdb1");
-        rs = stmt3.executeQuery("select * from memdb1.tbl");
+        rs = stmt3.executeQuery("select * from memdb1." + tbl);
         assertTrue(rs.next());
         assertEquals(100, rs.getInt(1));
-        stmt3.executeUpdate("create table tbl2(col int)");
-        stmt3.executeUpdate("insert into tbl2 values(200)");
+        stmt3.executeUpdate("create table " + tbl2 + "(col int)");
+        stmt3.executeUpdate("insert into " + tbl2 + " values(200)");
         stmt3.close();
 
         Connection conn4 = DriverManager.getConnection("jdbc:sqlite:file::memory:?cache=shared");
         Statement stmt4 = conn4.createStatement();
-        rs = stmt4.executeQuery("select * from tbl2");
+        rs = stmt4.executeQuery("select * from " + tbl2);
         assertTrue(rs.next());
         assertEquals(200, rs.getInt(1));
         rs.close();
